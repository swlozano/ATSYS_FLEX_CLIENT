<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow  xmlns:mx="http://www.adobe.com/2006/mxml" 
	borderSkin="CSS.SKIN.PopUpSkin" 
	layout="absolute" width="750" height="500"
	x="{(Application.application.width/2)-(this.width/2)}"
	y = "{(Application.application.height/2)-(this.height/2)}"
	showCloseButton="false">
	<mx:Script>
	
        <![CDATA[
        	import EVENT.CuentasCobroEvent;
        	import MODEL.CuentasCobroMl;
        	import MODEL.ContratoMl;
        	import mx.core.Application;
        	import MODEL.UsuariosSysMl;
        	import MODEL.UtilidadesMl;
        	import mx.collections.ArrayCollection;
        	import com.adobe.cairngorm.control.CairngormEventDispatcher;
        	import EVENT.RolesSysEvent;
        	import VO.RolSysVO;
        	import MODEL.PermisosMl;
        	import mx.controls.Alert;
        	import mx.events.ValidationResultEvent;
        	import mx.validators.Validator;
        	import mx.events.CloseEvent;       
            import mx.managers.PopUpManager;
            import mx.controls.Text;
           
            [Bindable]
            public var formIsValid:Boolean=false;
          
            private var focussedFormControl:DisplayObject;
          
            [Embed(source="/REC/IMAGENES/warn2.png")]
		    public var alerta:Class;
           
            private function returnName():void {
                 PopUpManager.removePopUp(this);
                 
                 CuentasCobroMl.getInstance().CuentasCobroPpl.ppfiltro.selectedIndex=5;
                 
                 PermisosMl.getInstance().CloseMainMenu.enabled=true;
		         UsuariosSysMl.getInstance().mostrarSubMenu=true;
            }
            
            public function filtrar():void{
            
              if(formIsValid){	
            
                  
                  
                 /* if(CuentasCobroMl.getInstance().CuentasCobroPpl.cbxestado.selectedIndex==-1){
                  	
                  	Alert.show("Selecciona Un Estado de la cuenta de cobro " ,"Mensaje de alerta",0,null,null,alerta,0);
                  	returnName();
                  	
                  }else{*/
                  	
                  	     /*CuentasCobroMl.getInstance().idtipoEstado =  CuentasCobroMl.getInstance().CuentasCobroPpl.cbxestado.selectedItem.num;
                  	     var e:CuentasCobroEvent = new CuentasCobroEvent(CuentasCobroEvent.FILTRAR_POR_CONTRATO);
                         CairngormEventDispatcher.getInstance().dispatchEvent(e);
                          */
                         CuentasCobroMl.getInstance().idContratoToFiltrar = dgcontratos.selectedItem.id;      
                         
                         PopUpManager.removePopUp(this); 
                                            	     
                       //}
                    
              }
            
            }
            
            
            private function validateForm(event:Event):void{
            
               focussedFormControl = event.target as DisplayObject;
               formIsValid = true;
               validate(contratoValidator);
               
            }
            
            private function validate(validator:Validator):Boolean{
            
               var validatorSource:DisplayObject = validator.source as DisplayObject;
               var suppressEvents:Boolean = (validatorSource != focussedFormControl);
               var event:ValidationResultEvent = validator.validate(null, suppressEvents); 
               var currentControlIsValid:Boolean = (event.type == ValidationResultEvent.VALID);
               formIsValid = formIsValid && currentControlIsValid;
               return currentControlIsValid;
            } 
            
            public function dg_labelFuncEstado(item:Object,dgcolumn:DataGridColumn):String {
            
                 var retorno:String;
                  
                  if(parseFloat(item.estado)==0){
                  
                   retorno = "Vigente"; 
                  
                  }else if(parseFloat(item.estado)==1){
                  	
                            retorno = "Terminado"; 
                           
                          }
                   
              	
                 return retorno;
               
              }
            
             public function dg_labelFuncRecHumano(item:Object,dgcolumn:DataGridColumn):String {
            
                 var nombreApe:String;
                  
                 nombreApe = item.recursoHumano.nombre; 
              	
                 return nombreApe;
               
              }
              
              public function dg_labelFunctipoContrato(item:Object,dgcolumn:DataGridColumn):String {
            
                 var nombre:String;
                  
                 nombre = item.tiposContrato.tipoContrato;
              	
                 return nombre;
               
              }
              
              public function dg_labelFuncCountryLabores(item:Object,dgcolumn:DataGridColumn):String {
            
                 var pais:String;
                  
                 pais = item.countryByIdNacionLabores.name;
              	
                 return pais;
               
              }
              
              public function dg_labelFuncCountryContrato(item:Object,dgcolumn:DataGridColumn):String {
            
                 var pais:String;
                  
                 pais = item.countryByIdNacionContrato.name;
              	
                 return pais;
               
              }
            
        ]]>
    </mx:Script>
    
    <mx:NumberValidator
    	requiredFieldError="!!Seleccione un Contrato de la Grilla¡¡"
    	lowerThanMinError="!!Seleccione un Contrato de la Grilla¡¡"
    	minValue="0"
        id="contratoValidator"
        source="{dgcontratos}" 
        property="selectedIndex"
        
    />
    
    
    
    <mx:VBox  width="100%" height="100%" id="vbox1" horizontalAlign="center" verticalAlign="middle" >

		<mx:Box width="100%" height="35"  borderSkin="CSS.SKIN.BoxSkinUp" id="box1" verticalAlign="middle" horizontalAlign="center">
			<mx:Canvas width="100%" height="100%" id="canvas1" >
				<mx:Label  id="lblAddUs" text="FILTRADO POR CONTRATO" color="#FFFFFF" fontWeight="bold" fontSize="13"
 		 		x="{(canvas1.width/2)-(lblAddUs.width/2)}" y="12"/>	
			</mx:Canvas>
		</mx:Box>
 
		<mx:Box id="box2" height="82%" width="100%" borderSkin="CSS.SKIN.BoxSkinMedio" verticalAlign="middle" horizontalAlign="center">
			
				<mx:Box width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" id="box2_1">
					
					 
				
						<mx:Box width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
						        <mx:DataGrid dataProvider="{ContratoMl.getInstance().listContrato}" change="{validateForm(event)}" id="dgcontratos" width="96%" height="95%" >
						        	  <mx:columns>
						        	  	 <mx:DataGridColumn labelFunction="dg_labelFunctipoContrato" headerText="Tipo Contrato" textAlign="center" />
						        	     <mx:DataGridColumn itemRenderer="VIEW.Items.Contratos.ItemFechaInicioContrato" headerText="Fecha Ini" textAlign="center"/>
						        	     <mx:DataGridColumn itemRenderer="VIEW.Items.Contratos.ItemFechaFinContrato" headerText="Fecha Fin" textAlign="center"/>
						        	     <mx:DataGridColumn labelFunction="dg_labelFuncEstado" headerText="Estado" textAlign="center"/>
						        	     <mx:DataGridColumn labelFunction="dg_labelFuncCountryLabores" headerText="Nac. Labores" textAlign="center"/>
						        	     <mx:DataGridColumn labelFunction="dg_labelFuncCountryContrato" headerText="Nac. Contrato" textAlign="center"/>
						        	     <mx:DataGridColumn labelFunction="dg_labelFuncRecHumano" headerText="Rec. Humano" textAlign="center"/>
						        	     
						        	  </mx:columns>
						        </mx:DataGrid>
						   </mx:Box>
				</mx:Box>
				
		</mx:Box>

		<mx:Box width="100%" height="40"  borderSkin="CSS.SKIN.BoxSkinAbajo" id="box3" verticalAlign="middle" horizontalAlign="center">
			<mx:HBox width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<mx:HBox height="100%" width="50%" verticalAlign="middle">
					<mx:Box horizontalAlign="right" verticalAlign="middle" width="50%">
						<mx:Image source="{UtilidadesMl.getInstance().rutaback2}"
  	  					 toolTip="Atras" />	
					</mx:Box>
					<mx:Box horizontalAlign="right" verticalAlign="middle" width="50%" disabledColor="#000000">
						<mx:Image id="ok" source="{formIsValid == true?UtilidadesMl.getInstance().rutaCheck:UtilidadesMl.getInstance().rutaCheck2}"  toolTip="Aceptar" enabled="{formIsValid}" click="{filtrar()}" />	
					</mx:Box>
  				</mx:HBox>
				<mx:HBox height="100%" width="50%" verticalAlign="middle">
					<mx:Box width="50%" verticalAlign="middle" horizontalAlign="left" >
						<mx:Image id="cancel" source="@Embed(source='REC/IMAGENES/delete.png')" click="{returnName()}" toolTip="Cancelar"/>	
					</mx:Box>
					<mx:Box width="50%" verticalAlign="middle" horizontalAlign="left">
						<mx:Image source="{UtilidadesMl.getInstance().next2}"  toolTip="Siguiente" />	
					</mx:Box>
  				</mx:HBox>
			</mx:HBox>
		</mx:Box>
	</mx:VBox>

    
    
</mx:TitleWindow>
















